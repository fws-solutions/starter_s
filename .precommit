#!/bin/sh

PROJECT=$(php -r "echo dirname(dirname(dirname(dirname(realpath('$0')))));")
STAGED_FILES_CMD=$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\.php)
UNSTAGED_FILES_CMD=$(git diff --name-only --diff-filter=ACMR | grep \\.php)
RED='\033[1;91m'
NC='\033[0m' # No Color
echo "${NC}"

# Determine if a file list is passed
if [ "$#" -eq 1 ]
then
    oIFS=$IFS
    IFS='
    '
    SFILES="$1"
    IFS=$oIFS
fi

SFILES=${SFILES:-$STAGED_FILES_CMD}

STAGED_BUT_MODIFIED_FILES=$(php -r "\$sfiles=(explode(\"\\n\", '$SFILES'));\$usfiles=(explode(\"\\n\", '$UNSTAGED_FILES_CMD'));echo implode(\"\\n\",array_intersect(\$usfiles,\$sfiles));")

if [ -z "$STAGED_BUT_MODIFIED_FILES" ]; then
    echo "OK"
else
    echo ${RED}"Files staged but then modified:${NC}\n\n"
    echo "${STAGED_BUT_MODIFIED_FILES}"
    exit 1
fi


echo "Checking PHP Lint..."
for FILE in $SFILES
do
    php -l -d display_errors=0 $PROJECT/$FILE
    if [ $? != 0 ]
    then
        echo "${RED}Fix the error before commit.${NC}\n"
        exit 1
    fi
    FILES="$FILES $PROJECT/$FILE"
done

if [ "$FILES" != "" ]
then
	# run auto-format
	echo "Running Code Beautifier."
    ./vendor/bin/phpcbf --standard=phpcs.xml $FILES > /dev/null

	# check for changes
	UNSTAGED_FILES_CMD=$(git diff --name-only --diff-filter=ACMR | grep \\.php)
	STAGED_BUT_MODIFIED_FILES=$(php -r "\$sfiles=(explode(\"\\n\", '$SFILES'));\$usfiles=(explode(\"\\n\", '$UNSTAGED_FILES_CMD'));echo implode(\"\\n\",array_intersect(\$usfiles,\$sfiles));")
	if [ -z "$STAGED_BUT_MODIFIED_FILES" ]; then
		echo "OK"
	else
		echo "${RED}Code beautifier auto-formatted these files:${NC}\n"
		echo "${STAGED_BUT_MODIFIED_FILES}\n"
		echo "${RED}Repeat commit command.${NC}\n"
		exit 1
	fi

	# run sniffer
    echo "Running Code Sniffer."
    ./vendor/bin/phpcs --standard=phpcs.xml -s $FILES
    if [ $? != 0 ]
    then
        echo "${RED}Fix the error before commit!${NC}\n"
        exit 1
    fi
fi

exit $?
